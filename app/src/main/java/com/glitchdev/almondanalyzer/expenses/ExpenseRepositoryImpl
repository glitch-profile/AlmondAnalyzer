class ExpenseRepository(private val storage: ExpenseStorage) {

    private val _expenses = MutableStateFlow<List<Expense>>(emptyList())
    val expenses: StateFlow<List<Expense>> = _expenses

    suspend fun loadAll() {
        _expenses.value = storage.load()
    }

    suspend fun loadForField(fieldId: Long) {
        _expenses.value = storage.loadForField(fieldId)
    }

    suspend fun addExpense(expense: Expense) {
        storage.add(expense)
        loadAll()
    }

    suspend fun removeExpense(expense: Expense) {
        storage.remove(expense)
        loadAll()
    }

    suspend fun search(query: String) {
        _expenses.value = storage.search(query)
    }

    suspend fun sortByDate() {
        _expenses.value = storage.getSortedByDate()
    }

    suspend fun sortByAmount() {
        _expenses.value = storage.getSortedByAmount()
    }

    fun getTotalAll(): Double = _expenses.value.sumOf { it.amount }

    fun getTotalForField(fieldId: Long): Double =
        _expenses.value.filter { it.fieldId == fieldId }.sumOf { it.amount }
}
